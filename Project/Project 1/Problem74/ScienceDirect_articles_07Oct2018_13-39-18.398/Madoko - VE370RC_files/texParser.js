// koka generated module: "texParser"
if (typeof define !== 'function') { var define = require('amdefine')(module) }
define(['./std_core', './std_dict', './std_string', './std_regex', './std_crypto', './std_path', './common', './entity', './texCommon', './texParserBase', './texParserItems'], function($std_core, $std_dict, $std_string, $std_regex, $std_crypto, $std_path, $common, $entity, $texCommon, $texParserBase, $texParserItems) {
"use strict";
 
// koka declarations:
var eol = "(?:[ \\t]*(?:%.*)?\\r?\\n)?";
var bibitemBody = "(?: *\\n)*([\\s\\S]*?)\\n(?= *\\n|\\\\bibitem)";
function parseTexAcc(context, acc, txt)  /* forall<h> (context : texParserBase/texContext, acc : std/string/builder<h>, txt : string) -> st<h> string */  { tailcall: while(1)
{
  if ((txt === "")) {
    return (acc).value;
  }
  else {
    $std_core._unit_;
  }
  var _x0 = $common.matchRules($texParserBase.grammar(context), context, txt, $std_core.id);
  {
    var _x1 = $std_string.append(acc, _x0.fst);
    var _x2 = ((txt).substr(_x0.snd >=1 ? _x0.snd : 1));
    acc = _x1;
    txt = _x2;
    continue tailcall;
  }
}}
function contextParse(context, txt)  /* (context : texParserBase/texContext, txt : string) -> string */  {
  if ((txt === "")) {
    return "";
  }
  else {
    return parseTexAcc(context, { value: '' }, $texParserBase.unbrace(txt));
  }
}
 
/* ignore the following commands and environments in bibliographies*/
var texcmd1 = "(begin|end|newlength|setlength|bibfield|BibitemShut)";
var texcmd2 = "(newcommand|renewcommand|providecommand|bibitemdeclare)";
 
/* ignore the following commands alwyas (and keep last argument) */
var texenv0 = "(document)";
var texenv1 = "(thebibliography)";
var texenvcaption = "block|alertblock|exampleblock";
var texignore0 = "relax";
var texignore1 = "protect|date";
var texignore2 = "scalebox";
var texignore3 = "multirow|resizebox";
 
/* keep these commands as is.. */
var texKeep2 = "newcommand|defcommand|renewcommand|def|edef|gdef|providecommand";
 
/* Use TexRaw for the following commands */
var texRawCmd0 = "(vfill|balance|leavevmode)";
var texRawCmd1 = "((?:this)pagestyle)";
var texRawCmd2 = "(markboth)";
 
/* main grammar */
var texGrammar = $std_core.conslist([$common.Rule("texnormal", $std_regex.regex(("^(?:[^" + ($texParserBase.special + "])+")), undefined, undefined), $texParserItems.texNormal), $common.Rule("texspaces", $std_regex.regex("^\\n {4,}", undefined, undefined), $texParserItems.texIndent), $common.Rule("texdocclass", $std_regex.regex(("^\\\\documentclass\\b\\s*" + ($texCommon.optarg + ("?\\s*" + ($texCommon.texarg + "([\\s\\S]*)")))), undefined, undefined), $texParserBase.texDocClass), $common.Rule("texsection", $std_regex.regex(("^\\\\" + ($texParserItems.texsect + ("\\b(\\*)?\\s*" + ($texCommon.optarg + ("?" + ($texCommon.texarg + ("(?:\\s*\\\\label\\b" + ($texCommon.texarg + ")?")))))))), undefined, undefined), $texParserItems.texSection), $common.Rule("texcomment1", $std_regex.regex("^\\\\begin{comment}([\\s\\S]*?)\\\\end{comment}", undefined, undefined), $texParserItems.texComment), $common.Rule("texcomment2", $std_regex.regex("^(\\n *%.*\\n(?: *%.*\\n)*)", undefined, undefined), $texParserItems.texComment), $common.Rule("texlcomment", $std_regex.regex("^(%.*)", undefined, undefined), $texParserItems.texComment), $common.Rule("texfigure", $std_regex.regex(("^\\\\begin{(figure|table)(\\*)?}" + ($texCommon.optarg + "?([\\s\\S]*?)\\\\end{\\1\\*?}")), undefined, undefined), $texParserItems.texCaptioned), $common.Rule("texwfigure", $std_regex.regex(("^\\\\begin{wrapfigure}" + ($texCommon.optarg + ($texCommon.texarg + ($texCommon.texarg + "?([\\s\\S]*?)\\\\end{wrapfigure}")))), undefined, undefined), $texParserItems.texWrapFigure), $common.Rule("texlabeled", $std_regex.regex(("^\\\\begin{(definition|lemma|theorem|proposition|corollary|proof|example|thm|dfn)(\\*)?}" + ($texCommon.optarg + "?([\\s\\S]*?)\\\\end{\\1\\*?}")), undefined, undefined), $texParserItems.texLabeled), $common.Rule("textabularx", $std_regex.regex(("^\\\\begin\\{(tabular[xy\\*])\\}\\s*" + ($texCommon.optarg + ("?\\s*" + ($texCommon.texarg + ("\\s*" + ($texCommon.texarg + "([\\s\\S]*?)\\\\end\\{\\1\\}")))))), undefined, undefined), $texParserItems.texTabularX), $common.Rule("textabular", $std_regex.regex(("^\\\\begin{tabular}\\s*" + ($texCommon.optarg + ("?\\s*" + ($texCommon.texarg + "([\\s\\S]*?)\\\\end{tabular}")))), undefined, undefined), $texParserItems.texTabular), $common.Rule("texitemp", $std_regex.regex(("^(?:[ \\t]*\\r?\\n)*\\\\pause\\b\\s*" + ($texCommon.optarg + ("?\\s*" + ("\\\\item\\b\\s*" + ($texParserBase.overlay + ("?" + ($texCommon.optarg + "?\\s*"))))))), undefined, undefined), $texParserItems.texItemPause), $common.Rule("texitem", $std_regex.regex(("^(?:[ \\t]*\\r?\\n)*\\\\item\\b\\s*" + ($texParserBase.overlay + ("?" + ($texCommon.optarg + "?\\s*")))), undefined, undefined), $texParserItems.texItem), $common.Rule("texlist", $std_regex.regex(("^\\\\begin\\{(itemize|enumerate)\\}\\s*" + ($texCommon.optarg + ("?\\s*((\\\\pause\\b\\s*)?\\\\item\\b\\s*" + ($texParserBase.overlay + ("?" + ($texCommon.optarg + "?\\s*)?")))))), undefined, undefined), $texParserItems.texList), $common.Rule("texendlist", $std_regex.regex("^\\\\end\\{(itemize|enumerate)\\}\\s*", undefined, undefined), $texParserItems.texEmptyLine), $common.Rule("texlisting", $std_regex.regex(("^\\\\begin\\{(lstlisting|verbatim|code|alltt)\\}\\s*" + ($texCommon.optarg + "?([\\s\\S]*?)\\\\end\\{\\1\\}\\s*")), undefined, undefined), $texParserItems.texListing), $common.Rule("texnoindent", $std_regex.regex("^\\\\noindent\\b([\\s\\S]*?\\n) *\\n", undefined, undefined), $texParserItems.texNoIndent), $common.Rule("texvspacex", $std_regex.regex(("^\\\\vspace\\b\\*?\\s*" + ($texCommon.texarg + "(?=(?:\\s|%.*)*[^\\\\\\{\\s])([\\s\\S]*?\\n) *(?=\\n|\\\\(?:end|item|begin|noindent)\\b)")), undefined, undefined), $texParserItems.texVSpacePara), $common.Rule("texminipage", $std_regex.regex(("^\\\\begin{minipage}\\s*" + ($texCommon.optarg + ("?" + ($texCommon.optarg + ("?" + ($texCommon.optarg + ("?" + $texCommon.texarg))))))), undefined, undefined), $texParserItems.texBeginMinipage), $common.Rule("texvspace", $std_regex.regex(("^\\\\vspace\\b\\*?\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texVSpace), $common.Rule("texhspace", $std_regex.regex(("^\\\\hspace\\b\\*?\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texHSpace), $common.Rule("texskip", $std_regex.regex(("^\\\\(?:big|med|small)skip\\b\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texSkip), $common.Rule("texmbox", $std_regex.regex(("^\\\\(m|make|f|frame)box\\b\\s*" + ($texCommon.optarg + ("?" + ($texCommon.optarg + ("?" + $texParserBase.texargg))))), undefined, undefined), $texParserItems.texMBox), $common.Rule("texparbox", $std_regex.regex(("^\\\\(par)box\\b\\s*" + ($texCommon.optarg + ("?" + ($texCommon.optarg + ("?" + ($texCommon.optarg + ("?" + ($texParserBase.texargg + $texParserBase.texargg)))))))), undefined, undefined), $texParserItems.texParBox), $common.Rule("texraisebox", $std_regex.regex(("^\\\\(raise)box\\b\\s*" + ($texParserBase.texargg + ($texCommon.optarg + ("?" + ($texCommon.optarg + ("?" + $texParserBase.texargg)))))), undefined, undefined), $texParserItems.texRaiseBox), $common.Rule("texvskip", $std_regex.regex(("^\\\\vskip\\b\\s*" + $texCommon.texdim), undefined, undefined), $texParserItems.texVSkip), $common.Rule("texhskip", $std_regex.regex(("^\\\\hskip\\b\\s*" + $texCommon.texdim), undefined, undefined), $texParserItems.texHSkip), $common.Rule("texframe", $std_regex.regex(("^\\\\begin{(?:frame|slide)}\\s*" + ($texParserBase.overlay + ("?" + ($texCommon.optarg + ("?" + ($texParserBase.texargg + ("?\\s*" + ($texParserBase.texargg + ("?" + "([\\s\\S]*?)\\\\end{frame}"))))))))), undefined, undefined), $texParserItems.texFrame), $common.Rule("texframeCmd", $std_regex.regex(("^\\\\frame\\b\\s*" + ($texParserBase.overlay + ("?" + ($texCommon.optarg + ("?" + $texParserBase.texargg))))), undefined, undefined), $texParserItems.texFrameCmd), $common.Rule("texcolumn", $std_regex.regex(("^\\\\begin{column}\\s*" + $texParserBase.texargg), undefined, undefined), $texParserItems.texColumn), $common.Rule("texonly", $std_regex.regex(("^\\\\(uncover|only|visible)\\b\\s*" + ($texParserBase.overlay + ("?" + $texParserBase.texargg))), undefined, undefined), $texParserItems.texUncover), $common.Rule("texbcblock", $std_regex.regex(("^\\\\begin{(" + (texenvcaption + (")}\\s*" + ($texParserBase.overlay + ("?" + $texParserBase.texargg))))), undefined, undefined), $texParserItems.texBeginCaptionBlock), $common.Rule("texecblock", $std_regex.regex(("^\\\\end{(" + (texenvcaption + ")}")), undefined, undefined), $texParserItems.texEndCaptionBlock), $common.Rule("texinclude", $std_regex.regex(("^\\\\(include(?:only)?|input)\\b\\s*" + ($texCommon.texarg + eol)), undefined, undefined), $texParserItems.texInclude), $common.Rule("textitle", $std_regex.regex(("^\\\\(?:maketitle|titlepage)\\b" + eol), undefined, undefined), $texParserItems.texMakeTitle), $common.Rule("texbib", $std_regex.regex(("^\\\\bibliography\\b\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texBibliography), $common.Rule("texclear", $std_regex.regex("^\\\\(pagebreak|newpage|clearpage)\\b\\s*", undefined, undefined), $texParserItems.texPageBreak), $common.Rule("texappendix", $std_regex.regex("^\\\\appendix\\b\\s*", undefined, undefined), $texParserItems.texAppendix), $common.Rule("textoc", $std_regex.regex("^\\\\tableofcontents\\b\\s*", undefined, undefined), $texParserItems.texToc), $common.Rule("textof", $std_regex.regex("^\\\\tableoffigures\\b\\s*", undefined, undefined), $texParserItems.texTof), $common.Rule("texfootnote", $std_regex.regex(("^\\\\footnote\\b\\s*" + ($texParserBase.texargg + "([\\s\\S]*?)\\n[ \\t\\r]*\\n")), undefined, undefined), $texParserItems.texFootnote), $common.Rule("teximg", $std_regex.regex(("^\\\\includegraphics\\b\\s*" + ($texParserBase.overlay + ("?" + ($texCommon.optarg + ("?" + ($texParserBase.texargg + "([\\s\\S]*?)(?:\\n[ \\t\\r]*\\n|$)")))))), undefined, undefined), $texParserItems.texImage), $common.Rule("texacks", $std_regex.regex("^\\\\acks\\b\\s*", undefined, undefined), $texParserItems.texAcks), $common.Rule("textoday", $std_regex.regex("^\\\\today\\b\\s*", undefined, undefined), $texParserItems.texToday), $common.Rule("texfname", $std_regex.regex("^\\\\currfilename\\b\\s*", undefined, undefined), $texParserItems.texFilename), $common.Rule("texref", $std_regex.regex(("^(~)?\\\\ref\\b" + $texParserBase.texargg), undefined, undefined), $texParserItems.texRef), $common.Rule("texverb", $std_regex.regex("^\\\\(?:verb|lstinline)\\*?([!\\+%\\|\\.\\^#@])(.*?)\\1", undefined, undefined), $texParserItems.texCode), $common.Rule("texmath1", $std_regex.regex("^(?:\\$(?:[^\\\\\\$]|\\\\.)+\\$|\\\\\\((?:[^\\\\]|\\\\[^\\)])*\\\\\\))", undefined, undefined), $texParserItems.texMathInline), $common.Rule("texmath2", $std_regex.regex("^(?:\\$\\$(?:[^\\\\\\$]|\\\\.|\\$(?!\\$))*\\$\\$|\\\\\\[(?:[^\\\\]|\\\\[^\\]])*\\\\\\])", undefined, undefined), $texParserItems.texMathDisplay), $common.Rule("texmathenv1", $std_regex.regex("^\\\\begin\\{(equation|displaymath)(\\*)?\\}([\\s\\S]*?)\\\\end{\\1\\2}", undefined, undefined), $texParserItems.texMathEnv), $common.Rule("texmathenv2", $std_regex.regex(("^\\\\begin\\{(gather|align|alignat|multline|eqnarray|flalign)(\\*)?\\}" + ($texCommon.texarg + "?([\\s\\S]*?)\\\\end{\\1\\2}")), undefined, undefined), $texParserItems.texMathSnippet), $common.Rule("textikz1", $std_regex.regex("^\\\\begin\\{tikzpicture\\}([\\s\\S]*?)\\\\end{tikzpicture}", undefined, undefined), $texParserItems.texTikzEnv), $common.Rule("textikz2", $std_regex.regex(("^\\\\tikz\\b\\s*" + ($texCommon.optarg + ("?\\s*" + $texCommon.texarg))), undefined, undefined), $texParserItems.texTikzCmd), $common.Rule("biblio", $std_regex.regex("^\\\\begin\\{thebibliography\\}\\s*(?:\\{([^}]+)\\})?(?: *\\n)*([\\s\\S]*?)\\\\end{thebibliography}", undefined, undefined), $texParserItems.texTheBibliography), $common.Rule("bibitemcite1", $std_regex.regex(("^\\\\bibitem\\[(?:\\\\protect *)?\\\\citename" + ($texCommon.texarg + ("(\\d+)\\]" + ($texCommon.texarg + bibitemBody)))), undefined, undefined), $texParserItems.texBibitemCiteName), $common.Rule("bibitemcite2", $std_regex.regex(("^\\\\bibitem\\[(?:\\\\protect *)?\\\\astroncite" + ($texCommon.texarg + ($texCommon.texarg + ("\\]" + ($texCommon.texarg + bibitemBody))))), undefined, undefined), $texParserItems.texBibitemCiteApa), $common.Rule("bibitemcite3", $std_regex.regex(("^\\\\bibitem\\[(?:\\\\protect *)?\\\\citeauthoryear" + ($texCommon.texarg + ($texCommon.texarg + ($texCommon.texarg + ("?\\](?:%.*\\s*)?" + ($texCommon.texarg + bibitemBody)))))), undefined, undefined), $texParserItems.texBibitemCiteAuthorYear), $common.Rule("bibitem", $std_regex.regex(("^\\\\bibitem\\b\\s*" + ($texCommon.optarg + ("?" + ($texCommon.texarg + bibitemBody)))), undefined, undefined), $texParserItems.texBibitem), $common.Rule("harvarditem", $std_regex.regex(("^\\\\harvarditem\\b\\s*" + ($texCommon.optarg + ("?" + ($texCommon.texarg + ($texCommon.texarg + ($texCommon.texarg + "(?: *\\n)*([\\s\\S]*?)\\n *\\n")))))), undefined, undefined), $texParserItems.texHarvarditem), $common.Rule("newblock", $std_regex.regex("^\\\\(newblock|nobreak)\\b", undefined, undefined), $texParserItems.texCommandClass), $common.Rule("citeay", $std_regex.regex(("^\\\\citeauthoryear\\b" + ($texCommon.texarg + ($texCommon.texarg + $texCommon.texarg))), undefined, undefined), $texParserItems.texCiteAuthorYear), $common.Rule("url", $std_regex.regex(("^\\\\(?:url|email)\\b" + $texCommon.texarg), undefined, undefined), $texParserItems.texUrl), $common.Rule("penalty", $std_regex.regex(("^\\\\(penalty)(?![a-zA-Z])\\s*(-?\\d+|" + ($texCommon.texarg + ")")), undefined, undefined), $texParserItems.texAttribute), $common.Rule("doi", $std_regex.regex(("^\\\\doi\\b" + $texCommon.texarg), undefined, undefined), $texParserItems.texDoi), $common.Rule("urlprefix", $std_regex.regex("^\\\\urlprefix\\b", undefined, undefined), $texParserItems.texUrlPrefix), $common.Rule("cite", $std_regex.regex(("^\\\\(short)?[Cc]ite(?:(author)|(year(?:par)?)|(al)?([pt]|A?N?P?)?(\\*)?)\\b" + ($texCommon.optarg + ("?" + ($texCommon.optarg + ("?" + $texCommon.texarg))))), undefined, undefined), $texParserItems.texCite), $common.Rule("bibinfo", $std_regex.regex(("^\\\\bibinfo\\b\\s*" + ($texCommon.texarg + ("\\s*" + $texCommon.texarg))), undefined, undefined), $texParserItems.texBibinfo), $common.Rule("bblname", $std_regex.regex("^\\\\bbl([a-z]+)\\b\\s*", undefined, undefined), $texParserItems.texBblName), $common.Rule("texsl", $std_regex.regex(("^\\{\\\\(?:text)?sl\\b" + ($texCommon.texargs + "\\}")), undefined, undefined), $texParserItems.texSlanted), $common.Rule("texsl2", $std_regex.regex(("^\\\\{\\\\slshape\\b\\s*" + ($texCommon.texargs + "\\}")), undefined, undefined), $texParserItems.texSlanted), $common.Rule("texsc", $std_regex.regex(("^\\\\textsc\\b\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texSmallcaps), $common.Rule("texsc2", $std_regex.regex(("^\\{\\\\sc(?:shape)?\\b\\s*" + ($texCommon.texargs + "\\}")), undefined, undefined), $texParserItems.texSmallcaps), $common.Rule("texit", $std_regex.regex(("^\\\\(?:textit|emph)\\b\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texEmph), $common.Rule("texit2", $std_regex.regex(("^\\{\\\\(?:itshape|em|it)\\b\\s*" + ($texCommon.texargs + "\\}(\\s)?")), undefined, undefined), $texParserItems.texEmph), $common.Rule("texbf", $std_regex.regex(("^\\\\textbf\\b\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texStrong), $common.Rule("texbf2", $std_regex.regex(("^\\{\\\\bfseries\\b\\s*" + ($texCommon.texargs + "\\}(\\s)?")), undefined, undefined), $texParserItems.texStrong), $common.Rule("texcode", $std_regex.regex(("^\\\\(code|verb|lstinline)\\b\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texCode), $common.Rule("textt1", $std_regex.regex(("^\\\\texttt\\b\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texMonospace), $common.Rule("textt2", $std_regex.regex(("^\\{\\\\tt(?:family)?\\b\\s*" + ($texCommon.texargs + "\\}")), undefined, undefined), $texParserItems.texMonospace), $common.Rule("texup", $std_regex.regex(("^\\\\textup\\b" + ($texCommon.texargs + "\\}")), undefined, undefined), $texParserItems.texUpright), $common.Rule("texup2", $std_regex.regex(("^\\\\{\\\\upshape\\b\\s*" + ($texCommon.texargs + "\\}")), undefined, undefined), $texParserItems.texUpright), $common.Rule("texrm1", $std_regex.regex(("^\\\\textrm\\b\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texRoman), $common.Rule("texrm2", $std_regex.regex(("^\\{\\\\rmfamily\\b\\s*" + ($texCommon.texargs + "\\}")), undefined, undefined), $texParserItems.texRoman), $common.Rule("texsf1", $std_regex.regex(("^\\\\textsf\\b\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texSans), $common.Rule("texsf2", $std_regex.regex(("^\\{\\\\sffamily\\b\\s*" + ($texCommon.texargs + "\\}")), undefined, undefined), $texParserItems.texSans), $common.Rule("texquote", $std_regex.regex(("^\\\\enquote\\b\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texDquot), $common.Rule("texccmd", $std_regex.regex(("^\\\\(alert)\\b\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texClassCmd), $common.Rule("texeol", $std_regex.regex(("^\\\\\\\\" + ($texCommon.optarg + "?")), undefined, undefined), $texParserItems.texLineBreak), $common.Rule("texcolor1", $std_regex.regex(("^\\\\(?:text|cell)color\\b\\s*" + ($texCommon.optarg + ("?" + ($texParserBase.texargg + $texParserBase.texargg)))), undefined, undefined), $texParserItems.texTextColor), $common.Rule("texcolor2", $std_regex.regex(("^\\{\\s*\\\\color\\b\\s*" + ($texCommon.optarg + ("?" + ($texParserBase.texargg + ($texCommon.texargs + "\\}"))))), undefined, undefined), $texParserItems.texTextColor), $common.Rule("texcolor3", $std_regex.regex(("^\\\\(f)?colorbox\\b\\s*" + ($texCommon.optarg + ("?" + ($texParserBase.texargg + $texParserBase.texargg)))), undefined, undefined), $texParserItems.texColorBox), $common.Rule("texinst", $std_regex.regex(("^\\\\(?:inst|IEEEauthorrefmark|etalchar)\\b\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texInst), $common.Rule("texsize", $std_regex.regex(("^\\{\\\\(" + ($texParserItems.texFontSizes + (")\\b\\s*" + ($texCommon.texargs + "\\}")))), undefined, undefined), $texParserItems.texFontSize), $common.Rule("texaccent", $std_regex.regex(("^\\\\([`\'^\"~]|[vrc]\\b)\\s*" + $texCommon.texarg), undefined, undefined), $texParserItems.texAccent), $common.Rule("texdash", $std_regex.regex("^---?", undefined, undefined), $texParserItems.texDash), $common.Rule("texitcmd", $std_regex.regex("^\\\\/", undefined, undefined), $texParserItems.texIgnore), $common.Rule("texdquot", $std_regex.regex("^``((?:[^\'\\\\\\n]|\\\\.|\'(?!\'))*)\'\'", undefined, undefined), $texParserItems.texDquot), $common.Rule("texsquot", $std_regex.regex("^`((?:[^\'\\\\\\n]|\\\\.)*)\'", undefined, undefined), $texParserItems.texSquot), $common.Rule("texdquot1", $std_regex.regex("^``", undefined, undefined), $texParserItems.texOther), $common.Rule("texrule", $std_regex.regex(("^\\\\rule\\b\\s*" + ($texCommon.optarg + ("?" + ($texCommon.texarg + $texCommon.texarg)))), undefined, undefined), $texParserItems.texRule), $common.Rule("texenv0", $std_regex.regex(("^\\\\begin\\{" + (texenv0 + ("\\}\\s*" + $texCommon.optargs))), undefined, undefined), $texParserItems.texAlwaysIgnore), $common.Rule("texenv1", $std_regex.regex(("^\\\\begin\\{" + (texenv1 + ("\\}\\s*" + ($texCommon.optargs + $texCommon.texarg)))), undefined, undefined), $texParserItems.texAlwaysIgnore), $common.Rule("texenvx", $std_regex.regex(("^\\\\end\\{(?:" + (texenv0 + ("|" + (texenv1 + ")\\}\\s*")))), undefined, undefined), $texParserItems.texAlwaysIgnore), $common.Rule("texkeep2", $std_regex.regex(("^\\\\(" + (texKeep2 + (")\\b\\*?\\s*" + ($texCommon.optargs + ($texCommon.texarg + ($texCommon.optargs + $texCommon.texarg)))))), undefined, undefined), $texParserItems.texKeep), $common.Rule("texignore3", $std_regex.regex(("^\\\\(" + (texignore3 + (")\\b\\s*" + ($texCommon.optargs + ($texParserBase.texargg + ($texParserBase.texargg + $texParserBase.texargg)))))), undefined, undefined), $texParserItems.texAlwaysIgnore5), $common.Rule("texignore2", $std_regex.regex(("^\\\\(" + (texignore2 + (")\\b\\s*" + ($texCommon.optargs + ($texParserBase.texargg + $texParserBase.texargg))))), undefined, undefined), $texParserItems.texAlwaysIgnore4), $common.Rule("texignore1", $std_regex.regex(("^\\\\(" + (texignore1 + (")\\b\\s*" + ($texCommon.optargs + $texCommon.texarg)))), undefined, undefined), $texParserItems.texAlwaysIgnore3), $common.Rule("texignore0", $std_regex.regex(("^\\\\(" + (texignore0 + (")\\b\\s*" + $texCommon.optargs))), undefined, undefined), $texParserItems.texAlwaysIgnore), $common.Rule("texenvbegin", $std_regex.regex(("^\\\\begin\\{([a-zA-Z@]+)(\\*)?\\}\\s*" + ($texParserBase.overlay + ("?" + ($texCommon.optarg + "?\\s*")))), undefined, undefined), $texParserItems.texEnvBegin), $common.Rule("texenvend", $std_regex.regex("^\\\\end\\{([a-zA-Z@]+)\\*?\\}\\s*", undefined, undefined), $texParserItems.texEnvEnd), $common.Rule("texifx", $std_regex.regex("^\\\\ifx\\b[\\s\\S]*?\\\\fi\\b", undefined, undefined), $texParserItems.texIgnore), $common.Rule("texcsname", $std_regex.regex("^\\\\csname\\b[\\s\\S]*?\\\\endcsname\\b", undefined, undefined), $texParserItems.texIgnore), $common.Rule("texentity", $std_regex.regex(("^\\\\" + ($texParserItems.texEntityCmd0 + "\\b\\s*")), undefined, undefined), $texParserItems.texEntityCmd), $common.Rule("texraw0", $std_regex.regex(("^\\\\" + (texRawCmd0 + ("\\b\\s*" + $texCommon.optargs))), undefined, undefined), $texParserItems.texRaw), $common.Rule("texraw1", $std_regex.regex(("^\\\\" + (texRawCmd1 + ("\\b\\s*" + ($texCommon.optargs + $texCommon.texarg)))), undefined, undefined), $texParserItems.texRaw), $common.Rule("texraw2", $std_regex.regex(("^\\\\" + (texRawCmd2 + ("\\b\\s*" + ($texCommon.optargs + ($texCommon.texarg + $texCommon.texarg))))), undefined, undefined), $texParserItems.texRaw), $common.Rule("texgroup", $std_regex.regex(("^\\{" + ($texCommon.texargs + "\\}")), undefined, undefined), $texParserItems.texGroup), $common.Rule("texcmd2", $std_regex.regex(("^\\\\(" + (texcmd2 + (")\\b\\s*" + ($texCommon.optargs + ($texCommon.texarg + ($texCommon.optargs + $texCommon.texarg)))))), undefined, undefined), $texParserItems.texIgnore), $common.Rule("texcmd1", $std_regex.regex(("^\\\\(" + (texcmd1 + (")\\b\\s*" + ($texCommon.optargs + $texCommon.texarg)))), undefined, undefined), $texParserItems.texIgnore), $common.Rule("texcmd", $std_regex.regex(("^(\\\\[a-zA-Z@]+)\\b\\s*(" + ($texCommon.optargs + ")")), undefined, undefined), $texParserItems.texGenericCommand), $common.Rule("texchar", $std_regex.regex("^\\\\[^a-zA-Z]", undefined, undefined), $texParserItems.texChar), $common.Rule("texother", $std_regex.regex("^[\\s\\S]", undefined, undefined), $texParserItems.texOther)], $std_core.Nil);
 
// Parse TeX elements and return Markdown
function parseTex(txt, id, citestyle, bststyle, verbose, ignore)  /* (txt : string, id : ?string, citestyle : ?common/citestyle, bststyle : ?string, verbose : ?bool, ignore : ?bool) -> string */  {
  var id_20025 = (id !== undefined) ? id : "";
  var citestyle_20029 = (citestyle !== undefined) ? citestyle : $common.citeAuto;
  var bststyle_20033 = (bststyle !== undefined) ? bststyle : "";
  var verbose_20037 = (verbose !== undefined) ? verbose : false;
  var ignore_20041 = (ignore !== undefined) ? ignore : true;
  var normTxt = $std_regex.replaceAll_1($std_regex.replaceAll_1(txt, $std_regex.regex("\\r\\n?", undefined, undefined), "\n", undefined), $std_regex.regex("\\t", undefined, undefined), "   ", undefined);
  var md = contextParse($texParserBase._createTexContext(texGrammar, citestyle_20029, bststyle_20033, ignore_20041, id_20025, contextParse), normTxt);
  if (verbose_20037) {
    $std_core.trace(("TeX to Markdown:\n" + md));
  }
  else {
    $std_core._unit_;
  }
  return md;
}
 
// koka exports:
return { 'eol': eol, 'bibitemBody': bibitemBody, 'parseTexAcc': parseTexAcc, 'contextParse': contextParse, 'texcmd1': texcmd1, 'texcmd2': texcmd2, 'texenv0': texenv0, 'texenv1': texenv1, 'texenvcaption': texenvcaption, 'texignore0': texignore0, 'texignore1': texignore1, 'texignore2': texignore2, 'texignore3': texignore3, 'texKeep2': texKeep2, 'texRawCmd0': texRawCmd0, 'texRawCmd1': texRawCmd1, 'texRawCmd2': texRawCmd2, 'texGrammar': texGrammar, 'parseTex': parseTex };
});